<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Database\Type;
use Cake\Event\Event;
use Cake\ORM\TableRegistry;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/3.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{

    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('Security');`
     *
     * @return void
     * @throws \Exception
     */
    public function initialize()
    {
        parent::initialize();

        $this->loadComponent('RequestHandler', [
            'enableBeforeRedirect' => false,
        ]);
        $this->loadComponent('Flash');

        $this->loadComponent('Cookie');
        $this->loadComponent('Auth', [
            'authorize' => ['Controller'], // Ajout de cette ligne
            'authError' => 'Vous n\'êtes pas autorisé à accéder à cette page',
            'authenticate' => [
                'Form' => [
                    'fields' => ['username' => 'mail']
                ],
            ],
            'loginAction' => [
                'controller' => 'Users',
                'action' => 'login',
                'prefix' => 'admin'
            ],
            'logoutRedirect' => [
                'controller' => 'Users',
                'action' => 'login',
                'prefix' => 'admin',
            ]

        ]);
        $this->loadComponent('Security');
//        $this->loadComponent('Csrf');

        Type::build('datetime')
            ->useLocaleParser()
            ->setLocaleFormat('dd/MM/yyyy HH:mm');

    }

    public function beforeFilter( Event $event ) {
        parent::beforeFilter( $event ); // TODO: Change the autogenerated stub
        if (!$this->getRequest()->getSession()->check('Auth.User') && $this->Cookie->read('remember')) {

            $cookie_admin = $this->Cookie->read('remember');
            $admins = TableRegistry::getTableLocator()->get('Users');
            $a = $admins->find()
                ->where(['Users.token' => $cookie_admin])
                ->select(['id', 'mail', 'name', 'role'])
                ->first();
            if ($a) {
                $this->getRequest()->getSession()->write('Auth.User',$a->toArray());
            }
        }

        if ($this->getRequest()->getParam('prefix') && $this->getRequest()->getParam('prefix') == 'admin') {
            $this->viewBuilder()->setLayout('admin');

        }else {
            $this->Auth->allow();
            $mobile = ($this->RequestHandler->isMobile()) ? true : false;
            $settings_site = TableRegistry::getTableLocator()->get('SettingSites')->settingsSite();
            $this->set(compact('settings_site','mobile'));
        }
    }


    /**
     * Before render callback.
     *
     * @param \Cake\Event\Event $event The beforeRender event.
     * @return \Cake\Http\Response|null|void
     */
    public function beforeRender(Event $event)
    {
        // Note: These defaults are just to get started quickly with development
        // and should not be used in production. You should instead set "_serialize"
        // in each action as required.
        if (!array_key_exists('_serialize', $this->viewVars) &&
            in_array($this->getResponse()->getType(), ['application/json', 'application/xml'])
        ) {
            $this->set('_serialize', true);
        }
    }
}
